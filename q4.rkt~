#lang racket

(define (getLastHalf lst sz)
  (if (equal? sz 0) (lst)
      (getLastHalf (cdr lst) (- sz 1))))

(define (getFirstHalf lst sz)
  (if (equal? sz 0) (lst)
  (append (car lst) (getFirstHalf (cdr lst) (- sz 1)))))

(define (merge lst1 lst2)
  (cond
    [(empty? lst1) lst2]
    [(empty? lst2) lst1]
    [(> (car lst1) (car lst2)) (append (list (car lst2)) (merge lst1 (cdr lst2)))]
    [else (append (list (car lst1)) (merge (cdr lst1) lst2))]))

(define (mergesort lst)
  (cond
    [(equal? (length lst) 0) null]
    [(equal? (length lst) 1) lst]
    [else (merge (mergesort (getFirstHalf lst (/ (length lst) 2))) (mergesort (getLastHalf lst (- (length lst) (/ (length lst) 2)))))]
    ))

